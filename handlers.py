import asyncio
import os
from main import bot, dp
from db import db
from aiogram.types import Message, CallbackQuery
from keyboards import user as nav
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.exceptions import MessageNotModified
from contextlib import suppress
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.utils.exceptions import BotBlocked
from methods.rc4 import encrypt_rc4, decrypt_rc4
from methods.sha256 import encrypt_sha256, decrypt_sha256
from methods.aes_ctr import encrypt_file_aes_ctr, decrypt_file_aes_ctr
from methods.blowfish import encrypt_file_blowfish, decrypt_file_blowfish
from methods.xor import encrypt_file_xor, decrypt_file_xor
from translations import _
import admin_panel


class Post(StatesGroup):
    encrypt_file = State()
    waiting_for_document = State()
    waiting_for_key = State()


@dp.message_handler(commands=['start'])
async def start(message: Message):
    if not db.user_exists(message.from_user.id):
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:', reply_markup=nav.lang_menu('ru'))
    else:
        lang = db.get_lang(message.from_user.id)
        await message.answer(_('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!', lang), reply_markup=nav.main_menu(lang))


@dp.callback_query_handler(text_contains='lang_')
async def set_language(call: CallbackQuery):
    await bot.delete_message(call.from_user.id, call.message.message_id)
    lang = call.data[5:]
    if not db.user_exists(call.from_user.id):
        await db.add_user(call.from_user.id, lang)
        await call.message.answer(_('–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è!', lang), reply_markup=nav.main_menu(lang))
    else:
        user_lang = db.get_lang(call.message.chat.id)
        if user_lang != lang:
            db.update_lang(lang, call.from_user.id)
            await call.message.answer(_('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–Ω—è—Ç—ã!', lang), reply_markup=nav.main_menu(lang))
        else:
            await call.message.answer(_('üö©–ù–µ–ª—å–∑—è —Å—Ç–∞–≤–∏—Ç—å —Ç–æ—Ç –∂–µ —Ä–µ–≥–∏–æ–Ω!', lang), reply_markup=nav.main_menu(lang))


@dp.message_handler(content_types=['text'])
async def handle_buttons(message: Message):
    lang = db.get_lang(message.from_user.id)
    if message.text == _('üì•–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ', lang):
        await message.answer(_('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è\n\n–ú–µ—Ç–æ–¥—ã:', lang), reply_markup=nav.btn_method)

    elif message.text == _('üì§–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ', lang):
        await message.answer(_('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏\n\n–ú–µ—Ç–æ–¥—ã', lang), reply_markup=nav.btn_decrypt)

    elif message.text == _('üìö–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏', lang):
        await message.answer(_('–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ <a href="https://teletype.in/">—Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</a>:'
                               '\n\n‚óè –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫, –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –∏ –º–µ—Ç–æ–¥–∞–º–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è'
                               '\n‚óè –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Ç–æ–¥–∞–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è'
                               '\n‚óè –ö–æ–º—å—é–Ω–∏—Ç–∏-—á–∞—Ç, –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å'
                               '\n‚óè –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ, —Ä–µ–∫–ª–∞–º–∞'
                               '\n‚óè FAQ', lang), parse_mode='HTML')

    elif message.text == _('‚öô–ù–∞—Å—Ç—Ä–æ–π–∫–∏', lang):
        await message.answer(_('–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:', lang), reply_markup=nav.lang_menu(lang))

    elif message.text == _('‚òé–ü–æ–¥–¥–µ—Ä–∂–∫–∞', lang):
        await message.answer(_('–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–∞—é—Ç –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É EnDeFast, —Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –∏—Ö –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É ‚Äî @PavelAstapenko üë®‚Äçüíª'
                               '\n\n–ú–µ–Ω–µ–¥–∂–µ—Ä –≤—Å–µ–≥–¥–∞ –ø–æ–º–æ–∂–µ—Ç —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –∏ –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –ª—é–±—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—é/—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—é, –∞ —Ç–∞–∫–∂–µ –ø–æ–º–æ–∂–µ—Ç —Ä–µ—à–∏—Ç—å –≤–∞—à–∏ –ø—Ä–æ–±–ª–µ–º—ã üòâ', lang))

    else:
        await message.answer(_('‚ö†–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥, –≤–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!', lang), reply_markup=nav.main_menu(lang))


@dp.callback_query_handler(lambda call: 'set' in call.data)
async def get_file_encrypt(call: CallbackQuery, state: FSMContext):
    with suppress(MessageNotModified):
        lang = db.get_lang(call.message.chat.id)
        method_name = call.data.split('_')[1]
        if lang == 'ru':
            send_message = await call.message.edit_text(f'–í—ã–±—Ä–∞–Ω: {method_name}'
                                                    '\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–≤–æ–π —Ñ–∞–π–ª: ', reply_markup=nav.cancel_action(lang))
        else:
            send_message = await call.message.edit_text(f'Selected: {method_name}'
                                                    '\n\nSend me your file: ', reply_markup=nav.cancel_action(lang))

        await state.update_data(method=method_name, send_message=send_message)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await Post.encrypt_file.set()


@dp.callback_query_handler(text='set_cancel', state=Post.encrypt_file)
async def go_back(call: CallbackQuery, state: FSMContext):
    await state.finish()
    lang = db.get_lang(call.message.chat.id)
    await call.message.edit_text(_('üîô–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', lang))


@dp.message_handler(content_types=types.ContentTypes.DOCUMENT, state=Post.encrypt_file)
async def encrypt_master(message: types.Message, state: FSMContext):
    key = message.text
    lang = db.get_lang(message.from_user.id)

    data = await state.get_data()
    method_name = data.get('method')  # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    send_message = data.get('send_message')  # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await bot.edit_message_text(chat_id=message.from_user.id, message_id=send_message.message_id, text=_('üìÇ–ó–∞—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ...\n\n‚è≥–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ!', lang))

    document = message.document

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    file_path = f"downloads/{document.file_name}"
    await message.delete()
    await bot.download_file_by_id(document.file_id, file_path)

    if method_name == 'aes':
        key = encrypt_file_aes_ctr(document.file_name)

    elif method_name == 'sha256':
        key = encrypt_sha256(document.file_name)

    elif method_name == 'blowfish':
        key = encrypt_file_blowfish(document.file_name)

    # —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Ä–µ–∂–∏–º–µ –∞–ø—Ä–æ–±–∞—Ü–∏–∏
    """
    elif method_name == 'rc4':
        key = encrypt_rc4(document.file_name)

    elif method_name == 'xor':
        key = encrypt_file_xor(document.file_name)
    """

    os.remove(file_path)

    await bot.edit_message_text(chat_id=message.from_user.id, message_id=send_message.message_id, text=_('‚úÖ–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω!', lang))

    if lang == 'ru':
        key_answer = (f'üìÆ–ú–µ—Ç–æ–¥ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {method_name}\n\n'
                    f'üîë–í–∞—à –∫–ª—é—á —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {key}\n\n'
                    '‚ö†–°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É!')
    else:
        key_answer = (f'üìÆEncryption method: {method_name}\n\n'
                    f'üîëYour decryption key for the file: {key}\n\n'
                    '‚ö†Message with file will be deleted in 1 minute!')

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –æ–±—Ä–∞—Ç–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    with open(file_path + '.enc', 'rb') as file:
        send_message = await bot.send_document(message.from_user.id, document=file, caption=key_answer)
    os.remove(file_path + '.enc')

    await state.finish()
    await asyncio.sleep(60)
    await send_message.delete()


@dp.callback_query_handler(lambda call: 'decrypt' in call.data)
async def get_file_decrypt(call: CallbackQuery, state: FSMContext):
    with suppress(MessageNotModified):
        lang = db.get_lang(call.message.chat.id)
        method_name = call.data.split('_')[1]

        if lang == 'ru':
            send_message = await call.message.edit_text(f'–í—ã–±—Ä–∞–Ω: {method_name}'
                                                    '\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–≤–æ–π —Ñ–∞–π–ª: ', reply_markup=nav.cancel_action(lang))
        else:
            send_message = await call.message.edit_text(f'Selected: {method_name}'
                                                    '\n\nSend me your file: ', reply_markup=nav.cancel_action(lang))

        await state.update_data(method=method_name, send_message=send_message)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await Post.waiting_for_document.set()


@dp.message_handler(content_types=types.ContentTypes.DOCUMENT, state=Post.waiting_for_document)
async def get_key_decrypt(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        lang = db.get_lang(message.from_user.id)
        document = message.document
        file_path = f"downloads/{document.file_name}"
        send_message = data.get('send_message')  # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await Post.waiting_for_key.set()

        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        await bot.edit_message_text(chat_id=message.from_user.id, message_id=send_message.message_id,
                                    text=_('üîë–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:', lang))

        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ø–∞–ø–∫—É /downloads
        await bot.download_file_by_id(document.file_id, file_path)
        await state.update_data(file_path=file_path)


@dp.message_handler(state=Post.waiting_for_key)
async def decrypt_master(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        lang = db.get_lang(message.from_user.id)
        file_path = data['file_path']
        key = message.text

        data = await state.get_data()
        method_name = data.get('method')
        try:
            if method_name == 'aes':
                output_file = decrypt_file_aes_ctr(file_path, key)

            elif method_name == 'sha256':
                output_file = decrypt_sha256(file_path, key)

            elif method_name == 'blowfish':
                output_file = decrypt_file_blowfish(file_path, key)

            # —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Ä–µ–∂–∏–º–µ –∞–ø—Ä–æ–±–∞—Ü–∏–∏
            """
            elif method_name == 'rc4':
                output_file = decrypt_rc4(file_path, key)

            elif method_name == 'xor':
                output_file = decrypt_file_xor(file_path, int(key))
            """

            if lang == 'ru':
                key_answer = (f'üìÆ–ú–µ—Ç–æ–¥ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {method_name}\n\n'
                            '‚ö†–°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É!')
            else:
                key_answer = (f'üìÆDecryption method: {method_name}\n\n'
                            '‚ö†Message with file will be deleted in 1 minute!')

            with open(output_file, 'rb') as file:
                send_message = await bot.send_document(message.from_user.id, document=file, caption=key_answer)
            os.remove(output_file)

        except:
            await message.answer(_(f'üö´–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ —Ñ–∞–π–ª–∞!\n\n‚ùó–í–∞—à —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ –≤–µ—Ä–Ω—ã–π –∫–ª—é—á —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏!', lang))

        await state.finish()
        await asyncio.sleep(60)
        await send_message.delete()


@dp.callback_query_handler(text='set_cancel', state=Post.waiting_for_document)
async def go_back(call: CallbackQuery, state: FSMContext):
    await state.finish()
    lang = db.get_lang(call.message.chat.id)
    await call.message.edit_text(_('üîô–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', lang))



