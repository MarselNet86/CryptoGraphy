from main import bot, dp
from db import db
from aiogram.types import Message, CallbackQuery
from keyboards import user as nav
from translations import _
import decrypter
import encrypter
import admin_panel

@dp.message_handler(commands=['start'])
async def start(message: Message):
    if not db.user_exists(message.from_user.id):
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:', reply_markup=nav.lang_menu('ru'))
    else:
        lang = db.get_lang(message.from_user.id)
        await message.answer(_('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!', lang), reply_markup=nav.main_menu(lang))


@dp.callback_query_handler(text_contains='lang_')
async def set_language(call: CallbackQuery):
    await bot.delete_message(call.from_user.id, call.message.message_id)
    lang = call.data[5:]
    if not db.user_exists(call.from_user.id):
        db.add_user(call.from_user.id, lang)
        await call.message.answer(_('–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è!', lang), reply_markup=nav.main_menu(lang))
    else:
        user_lang = db.get_lang(call.message.chat.id)
        if user_lang != lang:
            db.update_lang(lang, call.from_user.id)
            await call.message.answer(_('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–Ω—è—Ç—ã!', lang), reply_markup=nav.main_menu(lang))
        else:
            await call.message.answer(_('üö©–ù–µ–ª—å–∑—è —Å—Ç–∞–≤–∏—Ç—å —Ç–æ—Ç –∂–µ —Ä–µ–≥–∏–æ–Ω!', lang), reply_markup=nav.main_menu(lang))


@dp.message_handler(content_types=['text'])
async def handle_buttons(message: Message):
    lang = db.get_lang(message.from_user.id)
    if message.text == _('üì•–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ', lang):
        await message.answer(_('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è\n\n–ú–µ—Ç–æ–¥—ã:', lang), reply_markup=nav.btn_method)

    elif message.text == _('üì§–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ', lang):
        await message.answer(_('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏\n\n–ú–µ—Ç–æ–¥—ã', lang), reply_markup=nav.btn_decrypt)

    elif message.text == _('üìö–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏', lang):
        await message.answer(_('–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ <a href="https://teletype.in/">—Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</a>:'
                               '\n\n‚óè –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫, –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –∏ –º–µ—Ç–æ–¥–∞–º–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è'
                               '\n‚óè –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Ç–æ–¥–∞–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è'
                               '\n‚óè –ö–æ–º—å—é–Ω–∏—Ç–∏-—á–∞—Ç, –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å'
                               '\n‚óè –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ, —Ä–µ–∫–ª–∞–º–∞'
                               '\n‚óè FAQ', lang), parse_mode='HTML')

    elif message.text == _('‚öô–ù–∞—Å—Ç—Ä–æ–π–∫–∏', lang):
        await message.answer(_('–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:', lang), reply_markup=nav.lang_menu(lang))

    elif message.text == _('‚òé–ü–æ–¥–¥–µ—Ä–∂–∫–∞', lang):
        await message.answer(_('–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–∞—é—Ç –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É EnDeFast, —Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –∏—Ö –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É ‚Äî @eXXPate üë®‚Äçüíª'
                               '\n\n–ú–µ–Ω–µ–¥–∂–µ—Ä –≤—Å–µ–≥–¥–∞ –ø–æ–º–æ–∂–µ—Ç —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –∏ –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –ª—é–±—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—é/—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—é, –∞ —Ç–∞–∫–∂–µ –ø–æ–º–æ–∂–µ—Ç —Ä–µ—à–∏—Ç—å –≤–∞—à–∏ –ø—Ä–æ–±–ª–µ–º—ã üòâ', lang))

    else:
        await message.answer(_('‚ö†–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥, –≤–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!', lang), reply_markup=nav.main_menu(lang))