import asyncio
import os
from main import bot, dp
from db import db
from aiogram.types import Message, CallbackQuery
from keyboards import user as nav
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.exceptions import MessageNotModified
from contextlib import suppress
from aiogram import types
from aiogram.dispatcher import FSMContext
from methods.sha256 import encrypt_sha256
from methods.aes_ctr import encrypt_file_aes_ctr
from methods.blowfish import encrypt_file_blowfish
from translations import _


class Post(StatesGroup):
    encrypt_file = State()


@dp.callback_query_handler(lambda call: 'set' in call.data)
async def get_file_encrypt(call: CallbackQuery, state: FSMContext):
    with suppress(MessageNotModified):
        lang = db.get_lang(call.message.chat.id)
        method_name = call.data.split('_')[1]
        if lang == 'ru':
            send_message = await call.message.edit_text(f'–í—ã–±—Ä–∞–Ω: {method_name}'
                                                    '\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–≤–æ–π —Ñ–∞–π–ª: ', reply_markup=nav.cancel_action(lang))
        else:
            send_message = await call.message.edit_text(f'Selected: {method_name}'
                                                    '\n\nSend me your file: ', reply_markup=nav.cancel_action(lang))

        await state.update_data(method=method_name, send_message=send_message)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await Post.encrypt_file.set()


@dp.message_handler(content_types=types.ContentTypes.DOCUMENT, state=Post.encrypt_file)
async def encrypt_master(message: types.Message, state: FSMContext):
    key = message.text
    lang = db.get_lang(message.from_user.id)

    data = await state.get_data()
    method_name = data.get('method')  # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    send_message = data.get('send_message')  # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await bot.edit_message_text(chat_id=message.from_user.id, message_id=send_message.message_id, text=_('üìÇ–ó–∞—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ...\n\n‚è≥–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ!', lang))

    document = message.document

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    file_path = f"downloads/{document.file_name}"
    await message.delete()
    await bot.download_file_by_id(document.file_id, file_path)

    if method_name == 'aes':
        key = encrypt_file_aes_ctr(document.file_name)

    elif method_name == 'sha256':
        key = encrypt_sha256(document.file_name)

    elif method_name == 'blowfish':
        key = encrypt_file_blowfish(document.file_name)

    # —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Ä–µ–∂–∏–º–µ –∞–ø—Ä–æ–±–∞—Ü–∏–∏
    """
    elif method_name == 'rc4':
        key = encrypt_rc4(document.file_name)

    elif method_name == 'xor':
        key = encrypt_file_xor(document.file_name)
    """

    os.remove(file_path)

    await bot.edit_message_text(chat_id=message.from_user.id, message_id=send_message.message_id, text=_('‚úÖ–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω!', lang))

    if lang == 'ru':
        key_answer = (f'üìÆ–ú–µ—Ç–æ–¥ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {method_name}\n\n'
                    f'üîë–í–∞—à –∫–ª—é—á —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: <code>{key}</code>\n\n'
                    '‚ö†–°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É!')
    else:
        key_answer = (f'üìÆEncryption method: {method_name}\n\n',
                    f'üîëYour decryption key for the file: <code>{key}</code>\n\n'
                    f'‚ö†Message with file will be deleted in 1 minute!')

    output_file = os.path.splitext(file_path)[0] + '_enc' + os.path.splitext(file_path)[1]
    with open(output_file, 'rb') as file:
        send_message = await bot.send_document(message.from_user.id, document=file, caption=key_answer, parse_mode='HTML')
    os.remove(output_file)

    db.post_enc_statics(message.from_user.id)

    await state.finish()
    await asyncio.sleep(60)
    await send_message.delete()


@dp.callback_query_handler(text='set_cancel', state=Post.encrypt_file)
async def go_back(call: CallbackQuery, state: FSMContext):
    await state.finish()
    lang = db.get_lang(call.message.chat.id)
    await call.message.edit_text(_('üîô–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', lang))