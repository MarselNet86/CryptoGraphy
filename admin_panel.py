import asyncio
import os
from main import bot, dp
from db import db
from aiogram.types import Message, CallbackQuery
from keyboards import admin as nav
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.exceptions import MessageNotModified
from contextlib import suppress
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.utils.exceptions import BotBlocked
from config import admin_id


class Post(StatesGroup):
    waiting_text = State()
    waiting_photo = State()


@dp.message_handler(commands=['admin'])
async def admin_panel(message: Message):
    if message.from_user.id == admin_id:
        await message.answer('–û—Ç–∫—Ä—ã—Ç–∞ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å.', reply_markup=nav.admin_keyboard)


@dp.message_handler(lambda message: message.text in ['–†–∞—Å—Å—ã–ª–∫–∞', '–í—ã–≥—Ä—É–∑–∫–∞ –ë–î', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'])
async def process_news_command(message: Message, state: FSMContext):
    if message.from_user.id == admin_id:
        if message.text == '–†–∞—Å—Å—ã–ª–∫–∞':
            await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ üëá')
            await Post.waiting_text.set()
        elif message.text == '–í—ã–≥—Ä—É–∑–∫–∞ –ë–î':
            file_path = 'data.xlsx'
            db.export_users(file_path)
            with open(file_path, 'rb') as file:
                await bot.send_document(message.from_user.id, document=file, caption='–¢–∞–±–ª–∏—Ü–∞ users')

        elif message.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
            bot_statics = db.get_statistics()
            await message.answer(f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ: {bot_statics}')


@dp.message_handler(state=Post.waiting_text)
async def get_text_for_post(message: Message, state: FSMContext):
    async with state.proxy() as data:  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è

        data['waiting_text'] = message.text
        await message.answer(f"–í–∞—à –ø–æ—Å—Ç:\n\n{data['waiting_text']}", reply_markup=nav.btn_mailing)
        await state.reset_state(with_data=False)


@dp.callback_query_handler(lambda call: call.data in ['add_picture', 'mail_confirm', 'mail_cancel'])
async def standart_mailing_settings(call: CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        message_text = data['waiting_text']

        with suppress(MessageNotModified):
            if call.data == 'add_picture':
                await call.message.edit_text('üì≤–ü—Ä–µ–∫—Ä–µ–ø–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É')
                await Post.waiting_photo.set()

            if call.data == 'mail_confirm':
                await bot.answer_callback_query(call.id)
                await call.message.delete()

                user_ids, count_before = db.mailing()
                count_after = 0
                for user_id in user_ids:
                    try:
                        await bot.send_message(user_id[0], message_text)
                        count_after += 1
                    except BotBlocked:
                        pass

                    await asyncio.sleep(5)

                await call.message.answer(
                    f'–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {str(count_after)} –∏–∑ {str(count_before)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')

            elif call.data == 'mail_cancel':
                await call.message.edit_text('–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!')


@dp.message_handler(state=Post.waiting_photo, content_types=types.ContentType.PHOTO)  # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
async def set_mailing_photo(message: Message, state: FSMContext):
    async with state.proxy() as data:  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        data['waiting_photo'] = message.photo[-1].file_id
        await bot.send_photo(message.chat.id, photo=data['waiting_photo'], caption=data['waiting_text'],
                             reply_markup=nav.btn_photo_mailing)
        await state.reset_state(with_data=False)


@dp.callback_query_handler(lambda call: call.data in ['photo_confirm', 'photo_cancel'])
async def send_mailing_photo(call: CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        message_text = data['waiting_text']
        message_photo = data['waiting_photo']
        with suppress(MessageNotModified):
            user_ids, count_before = db.mailing()
            count_after = 0
            if call.data == 'photo_confirm':
                await call.message.delete()
                for user_id in user_ids:
                    try:
                        await bot.send_photo(user_id[0], photo=message_photo, caption=message_text)
                        count_after += 1
                    except BotBlocked:
                        pass

                    await asyncio.sleep(5)

                await call.message.answer(
                    f'–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {str(count_after)} –∏–∑ {str(count_before)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')

            elif call.data == 'photo_cancel':
                await call.message.delete()
                await call.message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!')

            await state.finish()